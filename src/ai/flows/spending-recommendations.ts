// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized tips for optimizing the user's budget.
 *
 * - getSpendingRecommendations - A function that returns personalized tips for optimizing the user's budget.
 * - SpendingRecommendationsInput - The input type for the getSpendingRecommendations function.
 * - SpendingRecommendationsOutput - The return type for the getSpendingRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingRecommendationsInputSchema = z.object({
  monthlyIncome: z.number().describe('The user\'s monthly income.'),
  monthlySpendings: z
    .array(z.object({category: z.string(), amount: z.number()}))
    .describe('The user\'s spendings, broken down by category.'),
  financialGoals: z
    .string()
    .describe('The user\'s financial goals (e.g., saving for a vacation, paying off debt).'),
});
export type SpendingRecommendationsInput = z.infer<typeof SpendingRecommendationsInputSchema>;

const SpendingRecommendationsOutputSchema = z.object({
  recommendations: z
    .array(z.string())
    .describe('A list of personalized tips for optimizing the user\'s budget.'),
});
export type SpendingRecommendationsOutput = z.infer<typeof SpendingRecommendationsOutputSchema>;

export async function getSpendingRecommendations(
  input: SpendingRecommendationsInput
): Promise<SpendingRecommendationsOutput> {
  return spendingRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'spendingRecommendationsPrompt',
  model: 'googleai/gemini-2.0-flash', // Explicitly specify the model here
  input: {schema: SpendingRecommendationsInputSchema},
  output: {schema: SpendingRecommendationsOutputSchema},
  prompt: `You are a personal finance advisor. Analyze the user's spending habits and provide personalized tips for optimizing their budget.

  Monthly Income: {{monthlyIncome}}
  Monthly Spendings:
  {{#each monthlySpendings}}
  - {{category}}: {{amount}}
  {{/each}}
  Financial Goals: {{financialGoals}}

  Based on this information, provide a list of personalized tips for optimizing the user's budget.`,
});

const spendingRecommendationsFlow = ai.defineFlow(
  {
    name: 'spendingRecommendationsFlow',
    inputSchema: SpendingRecommendationsInputSchema,
    outputSchema: SpendingRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
